{"version":3,"sources":["Constants.js","Converter.js","App.js","reportWebVitals.js","index.js"],"names":["TemperatureUnits","VolumeUnits","AllUnits","TemperatureMapping","Kelvin","Celsius","Fahrenheit","Rankine","VolumeMapping","liters","tablespoons","cups","gallons","App","useState","inputValue","setInputValue","inputUnit","setInputUnit","targetUnit","setTargetUnit","studentResponse","setStudentResponse","output","setOutput","handleSubmit","includes","isNaN","Number","expectedTarget","fromUnit","toUnit","converter","from","to","value","toFixed","ConvertTemperature","ConvertVolume","console","log","Container","className","Form","onSubmit","e","preventDefault","Col","FormGroup","Label","Input","type","name","placeholder","onChange","target","Button","color","style","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac34b158.chunk.js","sourcesContent":["const TemperatureUnits = [\"Kelvin\", \"Celsius\", \"Fahrenheit\", \"Rankine\"];\n\nconst VolumeUnits = [\n  \"liters\",\n  \"tablespoons\",\n  \"cubic-inches\",\n  \"cups\",\n  \"cubic-feet\",\n  \"gallons\",\n];\n\nconst AllUnits = [...TemperatureUnits, ...VolumeUnits];\n\nexport { TemperatureUnits, VolumeUnits, AllUnits };\n","import * as converter from \"units-converter\";\n\nconst TemperatureMapping = {\n  Kelvin: \"K\",\n  Celsius: \"C\",\n  Fahrenheit: \"F\",\n  Rankine: \"R\",\n};\n\nconst VolumeMapping = {\n  liters: \"l\",\n  tablespoons: \"Tbs\",\n  \"cubic-inches\": \"in3\",\n  cups: \"cup\",\n  \"cubic-feet\": \"ft3\",\n  gallons: \"gal\",\n};\n\nconst ConvertTemperature = (fromUnit, toUnit, inputValue) => {\n  return Number(\n    converter\n      .temperature(Number(inputValue))\n      .from(TemperatureMapping[fromUnit])\n      .to(TemperatureMapping[toUnit])\n      .value.toFixed(1)\n  );\n};\n\nconst ConvertVolume = (fromUnit, toUnit, inputValue) => {\n  return Number(\n    converter\n      .volume(Number(inputValue))\n      .from(VolumeMapping[fromUnit])\n      .to(VolumeMapping[toUnit])\n      .value.toFixed(1)\n  );\n};\n\nexport { ConvertTemperature, ConvertVolume };\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n} from \"reactstrap\";\n\nimport \"./App.css\";\n\nimport { AllUnits, TemperatureUnits, VolumeUnits } from \"./Constants\";\nimport { ConvertTemperature, ConvertVolume } from \"./Converter\";\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState(0.0);\n  const [inputUnit, setInputUnit] = useState(null);\n  const [targetUnit, setTargetUnit] = useState(null);\n  const [studentResponse, setStudentResponse] = useState(0.0);\n\n  const [output, setOutput] = useState(null);\n\n  const handleSubmit = () => {\n    if (inputUnit == null || targetUnit == null) {\n      setOutput(\"Input Unit, Target Unit fields are mandatory.\");\n      return;\n    }\n\n    // Invalid unit of measure\n    if (!AllUnits.includes(inputUnit) || !AllUnits.includes(targetUnit)) {\n      setOutput(\"invalid\");\n      return;\n    }\n\n    // Input, target units not belonging to same category is Invalid case.\n    if (\n      (TemperatureUnits.includes(inputUnit) &&\n        VolumeUnits.includes(targetUnit)) ||\n      (VolumeUnits.includes(inputUnit) && TemperatureUnits.includes(targetUnit))\n    ) {\n      setOutput(\"invalid\");\n      return;\n    }\n\n    // Invalid input or target values\n    if (isNaN(Number(inputValue)) || isNaN(Number(studentResponse))) {\n      setOutput(\"invalid\");\n      return;\n    }\n\n    let expectedTarget = null;\n    if (TemperatureUnits.includes(inputUnit)) {\n      expectedTarget = ConvertTemperature(inputUnit, targetUnit, inputValue);\n    } else if (VolumeUnits.includes(inputUnit)) {\n      expectedTarget = ConvertVolume(inputUnit, targetUnit, inputValue);\n    }\n\n    console.log(\"Comparing\", expectedTarget, studentResponse);\n\n    if (Number(studentResponse) === expectedTarget) {\n      setOutput(\"correct\");\n    } else {\n      setOutput(\"incorrect\");\n    }\n  };\n\n  return (\n    <Container className=\"App\">\n      <h2 className=\"text-center\">Unit Conversion Application</h2>\n      <Form\n        className=\"form\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          handleSubmit();\n        }}>\n        <Col className=\"mt-4\">\n          <FormGroup>\n            <Label>Input Numerical Value:</Label>\n            <Input\n              type=\"text\"\n              name=\"inputValue\"\n              placeholder=\"0.0\"\n              value={inputValue}\n              onChange={(e) => {\n                setInputValue(e.target.value);\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col className=\"mt-4\">\n          <FormGroup>\n            <Label>Input Unit of Measure:</Label>\n            <Input\n              type=\"text\"\n              name=\"inputUnit\"\n              value={inputUnit}\n              onChange={(e) => {\n                setInputUnit(e.target.value);\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col className=\"mt-4\">\n          <FormGroup>\n            <Label>Target Unit of Measure:</Label>\n            <Input\n              type=\"text\"\n              name=\"targetUnit\"\n              value={targetUnit}\n              onChange={(e) => {\n                setTargetUnit(e.target.value);\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col className=\"mt-4\">\n          <FormGroup>\n            <Label>Student Response Value:</Label>\n            <Input\n              type=\"text\"\n              name=\"studentResponse\"\n              placeholder=\"0.0\"\n              value={studentResponse}\n              onChange={(e) => {\n                setStudentResponse(e.target.value);\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Button color=\"primary\" style={{ marginTop: \"25px\" }}>\n          Submit\n        </Button>\n        {output != null && (\n          <Col className=\"mt-4\">\n            <p>Output: {output} </p>\n          </Col>\n        )}\n      </Form>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}